#include <stdio.h>
#include <stdlib.h>
#include <time.h>
#include <math.h>

typedef struct{
	double * arreglo;
	double fitness;
    int * MSolucion;  //Puse un arreglo llamado MSolucion para poder ir guardando las mejores soluciones por cada uno
}vector;




//En esta seccion utilizamos el recocido simulado , todas las funciones tienen ligeras diferencias en los nombres
//para no provocar errores en las llamadas
/************************Recocido Simulado***********************************/



//Aqui utilizamos dos metodos para crear vecinos, el 2-swap y el 2-opt

/*void Intercambio(int *sol, int tam) { //2-SWAP
    int i = rand() % tam;
    int j = rand() % tam;
    int aux = sol[i];
    sol[i] = sol[j];
    sol[j] = aux;
}*/


void Intercambio(int *sol, int tam) { //2-OPT
    int i = rand() % tam;
    int j = rand() % tam;
    if (i > j) {
        int aux = i;
        i = j;
        j = aux;
    }
    while (i < j) {
        int temp = sol[i];
        sol[i] = sol[j];
        sol[j] = temp;
        i++;
        j--;
    }
}


//A esta funcion le enviamos la permutacion y crea una matriz de tamnio_matriz x tamanio_matriz en el orden de la permutacion
void permutarMatriz(int **matriz, int tamanio_matriz, int *indices,int ** Perm) {
    for (int i = 0; i < tamanio_matriz; i++) {
        for (int j = 0; j < tamanio_matriz; j++) {
            Perm[i][j] = matriz[indices[i]][indices[j]];
        }
    }
}


//Para evaluar la funcion multuplicamos las entradas de la misma posicion de ambas matrices
int EvaluaFO(int ** Dis, int ** Flujo, int tamanio_matriz){
    int Suma=0;
    for(int i=0;i<tamanio_matriz;++i)
		for(int j=0;j<tamanio_matriz;j++){
			Suma=Suma+(Dis[i][j]*Flujo[i][j]);
		}
    return Suma;
}

void imprimeMatriz(int **matriz, int tamanio_matriz){
	for(int i=0;i<tamanio_matriz;i++){
		for(int j=0;j<tamanio_matriz;j++){
			printf("%d ",matriz[i][j]);
		}
	}
}

//Una funcion para imprimir el arreglo dinamico
void imprimeArreglo(int * arreglo, int tamanio_arreglo){
    for (int i=0 ; i<tamanio_arreglo;++i)
        printf("%d ",arreglo[i]);
}

//Generamos el primer vecino permutando al azar tantas veces como elementos haya en el arreglo
void generaVecino(int * sol_inicial, int * sol_vecina , int tamanio_arreglo){
    for(int i=0;i<tamanio_arreglo;++i){
        sol_vecina[i]=sol_inicial[i];
    }
    Intercambio(sol_vecina,tamanio_arreglo);
}

int recocido(int ** dis,int ** Flujo,int ** Perm ,int * solucion_Actual,int * sol_vecina, int tamanio_matriz,int tamanio_arreglo, float temperatura,float temperatura_final, float enfriamiento,int iteraciones, vector V){

	int * mejorSolucion=(int*)malloc(tamanio_arreglo * sizeof(int));

	//Colocamos un valor muy alto para la primera mejorFo
	int mejorFO=999999999;

	while(temperatura>temperatura_final){
		for(int i=0;i<iteraciones;++i){//el numero de vecinos que generamos


            permutarMatriz(dis,tamanio_matriz,solucion_Actual,Perm);
			int FOActual=EvaluaFO(Perm,Flujo,tamanio_matriz);

            generaVecino(solucion_Actual,sol_vecina,tamanio_arreglo);

            permutarMatriz(dis,tamanio_matriz,sol_vecina,Perm);
			int FOVecina=EvaluaFO(Perm,Flujo,tamanio_matriz);

			int delta=FOVecina-FOActual;
			if(delta<=0){

                for (int i=0 ; i<tamanio_arreglo;++i){
                    solucion_Actual[i]=sol_vecina[i];
                }
				FOActual=FOVecina;
			}
			else{
				float aleatorio=rand()/RAND_MAX;//aleatorio entre 0 y 1
				if(aleatorio<exp(-delta/temperatura)){

                    for (int i=0 ; i<tamanio_arreglo;++i){
                    solucion_Actual[i]=sol_vecina[i];
                }
					FOActual=FOVecina;
				}

			}

			if(FOActual<=mejorFO){
                for (int i=0 ; i<tamanio_arreglo;++i){
                    mejorSolucion[i]=solucion_Actual[i];
                }
				mejorFO=FOActual;
			}
		}
	temperatura=temperatura*enfriamiento;
	}
	
	//Aqui una vez terminado el recocido guardamos la mejor solucion en el array nuevo que le pusimos al struct

    for (int i = 0; i < tamanio_arreglo; i++) {
        V.MSolucion[i] =(int)mejorSolucion[i];
    }
    return (int)mejorFO; 
}


void generaSolInicial(int *sol_inicial, int tamanio_arreglo, int ** Perm){
    for (int i=0 ; i<tamanio_arreglo;++i){
        Intercambio(sol_inicial,tamanio_arreglo);
    }
}

int RecocidoSimulado(float temperatura_inicial,float temperatura_final,float enfriamiento,int iteraciones, int tamanio_arreglo,int tamanio_matriz, vector V, char * archivodis , char * archivoflu){
	FILE * archivo_flujo=fopen(archivoflu,"r");
	FILE * archivo_dis=fopen(archivodis,"r");
	int Elementos_dis[tamanio_matriz*tamanio_matriz];  // Arreglo temporal para almacenar los valores de distancias
    int Elementos_flu[tamanio_matriz*tamanio_matriz];  // Arreglo temporal para almacenar los valores de flujos
    int Contador = 0;

	//Hacemos el arreglo inicial

	int * arreglo_inicial=(int*)malloc(tamanio_arreglo * sizeof(int));
	for (int i=0;i<tamanio_arreglo;++i)
        arreglo_inicial[i]=i;


	//Desde aca pedimos la memoria para la matriz de distancias , de flujo y la de las permutaciones de distancias
	int ** distancias =(int**)malloc(sizeof(int*)*tamanio_matriz);
	int ** flujo=(int**)malloc(sizeof(int*)*tamanio_matriz);
	int ** dis_perm=(int**)malloc(sizeof(int*)*tamanio_matriz);

	for(int i=0;i<tamanio_matriz;i++){
		distancias[i]=(int*)malloc(sizeof(int)*tamanio_matriz);
		flujo[i]=(int*)malloc(sizeof(int)*tamanio_matriz);
		dis_perm[i]=(int*)malloc(sizeof(int)*tamanio_matriz);
	}

	//Ahora las llenamos

	//Las llenamos sin utilizar el hecho de que fueran simetricas porque de la otra manera nos causaba que no las llenara de manera correcta
	for(int i=0;i<tamanio_matriz;++i)
		for(int j=0;j<tamanio_matriz;j++){
			fscanf(archivo_dis,"%d,",&distancias[i][j]);
		}

    for(int i=0;i<tamanio_matriz;++i)
		for(int j=0;j<tamanio_matriz;j++){
			fscanf(archivo_flujo,"%d,",&flujo[i][j]);
		}

	//Cerramos los archivos pues si no provoca errores despues

    fclose(archivo_flujo);
    fclose(archivo_dis);

    for(int i=0;i<tamanio_matriz;++i)
		for(int j=i;j<tamanio_matriz;j++){
			dis_perm[i][j]=distancias[i][j];
			dis_perm[j][i]=dis_perm[i][j];

		}

    generaSolInicial(arreglo_inicial,tamanio_arreglo,dis_perm);

    int * arreglo_vecino=(int*)malloc(tamanio_arreglo * sizeof(int));
    int MejorFO;
    MejorFO=recocido(distancias,flujo,dis_perm,arreglo_inicial,arreglo_vecino,tamanio_matriz,tamanio_arreglo,temperatura_inicial,temperatura_final,enfriamiento,iteraciones,V);
    return (int)MejorFO;
}
/****************************************************************************/

/*********************Aqui comienza evolucion diferencial********************/

double evaluaFO(double arreglo[], vector V,char * archivodis,char * archivoflu){
	return RecocidoSimulado(arreglo[0],arreglo[1],arreglo[2],arreglo[3],20,20,V,archivodis,archivoflu);
}

double generaAleatorio(double minimo, double maximo){
	double aleatorio = (double) rand()/RAND_MAX;//aleatorio entre 0 y 1
	return minimo+aleatorio*(maximo-minimo);
}

void inicializaPoblacion(vector * objetivo, int dimension, int poblacion){
	for(int i=0;i<poblacion;++i){
		for(int j=0;j<dimension;++j){
			if(j==0)//valor para la temperatura inicial
				objetivo[i].arreglo[j]=generaAleatorio(900.0,1000.0);
			else if(j==1)//valor para la temperatura final
				objetivo[i].arreglo[j]=generaAleatorio(0.1,0.25);
			else if(j==2)//valor para actualizacion
				objetivo[i].arreglo[j]=generaAleatorio(0.9,0.99);
			else//valor para numero de iteraciones
				objetivo[i].arreglo[j]=generaAleatorio(5.0,20.0);
		}
    }
}

void ImprimeSoluciones(vector * poblacion_vector,int poblacion){
    for(int i=0;i<poblacion;++i){
        for (int j=0 ; j<20; ++j){
        printf("%d ",(int)poblacion_vector[i].MSolucion[j],"\n\n");
        }
    }
}

//Aqui mandamos algunas cosas mas para que al final de todo el programa nos devuelva el mejor fit , los mejores parametros y la mejor solucion
int imprimePoblacion(vector * poblacion_vector, int dimension, int poblacion,double fit, double * Mejor, int * Sol){
	for(int i=0;i<poblacion;++i){
        //Si tiene mejor fitness
        if(poblacion_vector[i].fitness<fit){

            //copiamos el vector
            for (int j=0; j<dimension;++j){
                Mejor[j]=poblacion_vector[i].arreglo[j];
            }
            //asignamos el nuevo fit
            fit=poblacion_vector[i].fitness;

            //Obtenemos la solucion
            for (int j=0; j<20;++j){
                Sol[j]=poblacion_vector[i].MSolucion[j];
        }
	    }
    
    }
    return fit;
}

//los ruidosos son los mutados
void construyeRuidosos(vector * objetivo, vector * ruidoso, int poblacion, int dimension){
	for(int i=0;i<poblacion;++i){
		int aleatorio1=0,aleatorio2=0,aleatorio3=0;
		while(aleatorio1==aleatorio2||aleatorio2==aleatorio3||aleatorio1==aleatorio3){
			aleatorio1=rand()%poblacion;
			aleatorio2=rand()%poblacion;
			aleatorio3=rand()%poblacion;
		}
		for(int j=0;j<dimension;++j){
			ruidoso[i].arreglo[j]=objetivo[aleatorio1].arreglo[j]+0.5*(objetivo[aleatorio2].arreglo[j]-objetivo[aleatorio3].arreglo[j]);
			if(j==0){//temp inicial
				if(ruidoso[i].arreglo[j]>1000.0)
					ruidoso[i].arreglo[j]=1000.0;
				if(ruidoso[i].arreglo[j]<900.0)
					ruidoso[i].arreglo[j]=900.0;
			}
			else if(j==1){//temp final
				if(ruidoso[i].arreglo[j]>0.25)
					ruidoso[i].arreglo[j]=0.25;
				if(ruidoso[i].arreglo[j]<0.1)
					ruidoso[i].arreglo[j]=0.1;
			}
			else if(j==2){//factor de actualizacion
				if(ruidoso[i].arreglo[j]>0.99)
					ruidoso[i].arreglo[j]=0.99;
				if(ruidoso[i].arreglo[j]<0.9)
					ruidoso[i].arreglo[j]=0.9;
			}
			else{
				if(ruidoso[i].arreglo[j]>20.0)
					ruidoso[i].arreglo[j]=20.0;
				if(ruidoso[i].arreglo[j]<5.0)
					ruidoso[i].arreglo[j]=5.0;
			}
		}
	}
}
//los de prueba son los cruzados
void construyePrueba(vector * objetivo, vector * ruidoso, vector *prueba,int dimension, int poblacion){
	for(int i=0; i < poblacion;++i)//iteramos cada individuo de la poblacion
		for(int j=0;j<dimension;++j){//iteramos ahora cada elemento del individuo
			double aleatorio = (double) rand()/RAND_MAX;
			if(aleatorio <= 0.5)//0.5 es la tasa de cruza
				prueba[i].arreglo[j]=objetivo[i].arreglo[j];
			else
				prueba[i].arreglo[j]=ruidoso[i].arreglo[j];
		}
}

void seleccion(vector * objetivo, vector * prueba, int poblacion){
	//vamos a recorrer cada elemento de los vectores objetivo y prueba para remplazar
	for(int i=0;i<poblacion;++i){//si el fitness del de prueba es mejor, remplazamos
		if(objetivo[i].fitness > prueba[i].fitness){
			objetivo[i]=prueba[i];
		}
	}
		//en caso contrario, no hacemos nada
}


//Los parametros del main para nuestro caso son : 4 Nombre del archivo de la matriz de distancias    "" de flujos
int main(int argc, char * argv[]){
	//Utilizamos srand(42)
	srand(42);
    int n=20;
	int poblacion=100;
	int dimension=atoi(argv[1]);
	char *archivodis=argv[2];
	char *archivoflu=argv[3];
	vector * objetivo=(vector*)malloc(sizeof(vector)*poblacion);
	for(int i=0;i<poblacion;++i){
		objetivo[i].arreglo=(double *)malloc(sizeof(double)*dimension);
        objetivo[i].MSolucion=(int *)malloc(sizeof(int)*n);
    }
	vector * ruidoso=(vector*)malloc(sizeof(vector)*poblacion);
	for(int i=0;i<poblacion;++i)
		ruidoso[i].arreglo=(double *)malloc(sizeof(double)*dimension);
	vector * prueba=(vector*)malloc(sizeof(vector)*poblacion);
	for(int i=0;i<poblacion;++i){
		prueba[i].arreglo=(double *)malloc(sizeof(double)*dimension);
        prueba[i].MSolucion=(int *)malloc(sizeof(int)*n);
    }
	
	inicializaPoblacion(objetivo,dimension,poblacion);


	int generacion=0;
	double *Mejor = (double*)malloc(dimension * sizeof(double));
    int *Sol = (int*)malloc(n * sizeof(int));


	double fit=99999999*1.0;
	while(generacion<50){
		if (generacion % 10 == 0)
			printf(". ");
		construyeRuidosos(objetivo,ruidoso,poblacion,dimension);
		construyePrueba(objetivo,ruidoso,prueba,dimension,poblacion);


		for(int i=0;i<poblacion;++i){
			objetivo[i].fitness=evaluaFO(objetivo[i].arreglo,objetivo[i],archivodis,archivoflu);//evaluamos a los vectores objetivo
			prueba[i].fitness=evaluaFO(prueba[i].arreglo,prueba[i],archivodis,archivoflu);//evaluamos a los vectores de prueba
		}
		seleccion(objetivo,prueba,poblacion);
        
        fit=imprimePoblacion(objetivo,dimension,poblacion,fit,Mejor,Sol);
		generacion++;
	}

	printf("El mejor ajuste de parametros es: \n\n ");
	for(int j=0;j<dimension;++j){
			printf("%10f ",Mejor[j]," ");
		}
	printf("\n\nCon un fit de : %10f ",fit);

    printf("Y solucion\n\n ");
	for(int j=0;j<n;++j){
			printf("%d ",Sol[j]," ");
		}
}